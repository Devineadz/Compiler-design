class TEST {
    public func tester(int x) : int;
};

class TEST2 {
    public float a;
    public func tester2(int x) : int;
};

class TEST3 inherits TEST, TEST2 {
    public func tester(int x) : int;
    public float a;
    private string b;
};

func TEST::tester(int x) : int
{
    return (x);
}

func TEST2::throw(int y) : y
{
    return (y);
}

func sample(float arr[][], float x, float y) : void
{   
    arr[0][0] = x;
    arr[0][1] = y;
    if (x == !5)
    then {
        break;
    } else;
    continue; 
}

main
{
    var{
        test t;
        test2 y;
        test3 z;
        float arr[1][1];
        integer k;
        string f;
    }
    t = t.tester(4);
    y = y.throw(5.0);
    z = z.tester(t.tester(5));
    f  = adf(afd).fd[gf][gfd];
    abc = cds(fd).gfd[fds];
    gfd = tes[test][gfb].gfd[hgf][fds];
    hgfds = fds[gfd][fds].gg;
    gfdj = ifds[gf][gfd].bh;
    gfsdgfs = fds.gfd[adsf][fds];
    gfd = id(id).id;
    asdf = id(id).id();
    gfd = id.id[id];
    gfd = id[id].id;
    gfgfd = id[id].id[id];
    k = 1 * 5;
    k = ((k +5) + k) / 1;
    f = "hello world";
  
}

/*
 classes
    --------------------------------------
| | no class declaration
| | class declaration
|x| multiple class declarations
|x| no data member declaration
|x| data member declaration
|x| multiple data member declaration
|x| no member function declaration
|x| member function declaration
| | multiple member function declaration
| | no member
|x| no inherited class
| | one inherited class
|x| multiple inherited classes
|x| private member specifier
|x| public member specifier
| | absence of member specifier

    functions: definitions
    --------------------------------------
| | no main function definition (not allowed)
|X| main function definition
| | multiple main function definitions (not allowed)
| | no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
|x| member function definition
| | multiple member function definitions
| | return type: void
|x| return type: integer
| | return type: float
| | return type: string
| | return type: id
| | return type: array (not allowed)


    functions: formal parameters
    --------------------------------------
|x| type: integer
| | type: float
| | type: string
| | type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
|x| member function call
| | parameters:0
|x| parameters:1
| | parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
|x| type: float
|x| type: string
| | type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size) (not allowed)

    function body: local variable declaration block
    --------------------------------------
| | no local variable declarations block
| | local variable declaration block
| | multiple local variable declarations block (not allowed)
| | no variables in block
| | 1 variable declared in block
| | multiple variables declared in block

    function body: statements
    --------------------------------------
|x| no statement
| | 1 statement
| | n statements
|x| if statement
| | if: empty then or else blocks
|x| if: 1-statement then or else blocks
| | if: n-statements then or else blocks
| | while statement
| | while: empty block
| | while: 1-statement block
| | while: n-statement block
| | read(<variable>) statement
| | write(<expr>) statement
| | return(<expr>) statement
|x| break statement
|x| continue statement
|x| assignment statement

    variable + idnest
    --------------------------------------
| | id
| | id.id
| | id.id(id)
|x| id(id).id
|x| id(id).id()
|x| id.id[id]
|x| id[id].id
|x| id[id].id[id]
|x| id.id[id][id]
|x| id[id][id].id
|x| id[id][id].id[id][id]
|x| id(id).id[id]
|x| id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
| | single variable
| | involving addop
|x| involving multop
| | involving relop
|x| involving addop + multop
| | involving multop + relop
|x| involving addop + multop + relop
|x| involving parentheses
|x| involving nested parentheses
| | involving ternary operator
|x| involving not
| | involving sign
|x| involving literals
| | involving variable + idnest
| | involving function calls
| | involving all the above in one expression
*/